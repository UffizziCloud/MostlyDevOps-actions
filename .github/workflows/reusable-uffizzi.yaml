---
name: Uffizzi Cluster

on:  
  # REUSABLE WORKFLOW with INPUTS
  # to keep this workflow simple, assumptions are made:
    # - Checks out a repo with a kustomization.yaml file
    # - Changes a image tag in the kustomization.yaml file
    # - Deploys to a Uffizzi Cluster
    # - Optionally notifies a Slack channel

  workflow_call:
    # allow reuse of this workflow in other repos
    inputs:
      repo:
        description: Kustomize repo to checkout
        required: true
        type: string
        # default: org/repo
      image:
        description: Image name to update in Kustomize
        required: true
        type: string
        # default: ghcr.io/org/repo
      tag:
        description: New tag to use for the image
        required: true
        type: string
      environments-root-dir:
        description: Root directory where all environment directories are located
        required: false
        type: string
        default: environments
      environment-dir:
        description: Path to the kustomization.yaml file
        required: true
        type: string
        # default: staging01
      slack-channel-id:
        description: Slack channel ID to post to
        required: false
        type: string
        # default: C0123456789
      pr-number:
        description: Pull Request Number (or other unique ID)
        required: true
        type: string

    secrets:
      slack-token:
        description: Docker Hub username
        required: false
      github-token:
        description: Docker Hub token with write access to the repo and PRs
        required: true

#    outputs:
#      pr-url:
#        description: "The newly created GitHub Pull Request URL"
#        value: ${{ jobs.gitops-pr.outputs.pr-url }}

# permissions: GITHUB_TOKEN are better set by the **calling** workflow
# but we'll set defaults here for reference
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idpermissions
# Need `id-token: write` for OIDC: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
permissions:
  id-token: write

jobs:
  uffizzi:

    name: Uffizzi

    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ inputs.repo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          token: ${{ secrets.github-token }}
          ref: uffizzi

      - name: Change image tag in kustomization.yaml
        run: |
          cd ${{ inputs.environments-root-dir }}/${{ inputs.environment-dir }}
          kustomize edit set image "$(echo '${{ inputs.image }}' | tr '[:upper:]' '[:lower:]'):${{ inputs.tag }}"
          cat kustomization.yaml

      - name: Create and/or Connect to Uffizzi Cluster
        env:
          UFFIZZI_SERVER: https://app.uffizzi.com/
          UFFIZZI_IMAGE: uffizzi/cli:v2
          UFFIZZI_CLUSTER: pr-${{ inputs.pr-number }}
        run: |
          # Identify if a Cluster for this PR exists.
          if docker run --rm \
            --env UFFIZZI_SERVER \
            --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
            --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
            ${UFFIZZI_IMAGE} cluster list | grep --quiet ${UFFIZZI_CLUSTER}
          then
            # If it already exists, fetch the `kubeconfig` to connect to it.
            docker run --rm --env UFFIZZI_SERVER \
              --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
              --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
              --mount type=bind,source="$(pwd)",target=/home \
            ${UFFIZZI_IMAGE} cluster update-kubeconfig \
              --name=${UFFIZZI_CLUSTER} --kubeconfig="/home/kubeconfig"
          else
            # Create the Cluster if it does not yet exist.
            docker run --rm --env UFFIZZI_SERVER \
              --env REQUEST_TOKEN=${ACTIONS_ID_TOKEN_REQUEST_TOKEN} \
              --env REQUEST_TOKEN_URL=${ACTIONS_ID_TOKEN_REQUEST_URL} \
              --mount type=bind,source="$(pwd)",target=/home \
            ${UFFIZZI_IMAGE} cluster create \
              --name=${UFFIZZI_CLUSTER} --kubeconfig="/home/kubeconfig"
            echo "Uffizzi Cluster \`${UFFIZZI_CLUSTER}\` created." >> $GITHUB_STEP_SUMMARY
            export KUBERNETES_SERVICE_HOST=`yq '.clusters[0].cluster.server' < ./kubeconfig | cut -d'/' -f3`
            echo "Available at \`${KUBERNETES_SERVICE_HOST}\`." >> $GITHUB_STEP_SUMMARY
            echo "Waiting for $KUBERNETES_SERVICE_HOST"
            # Wait for the Cluster Master API to be available.
            sleep 3 #TODO improve this
            # Create an Ingress for the `web` Service.
            kubectl create ingress web \
              --class=nginx \
              --rule="${UFFIZZI_CLUSTER}.wordsmith.app.qa-gke.uffizzi.com/*=web:8080" \
              --kubeconfig ./kubeconfig
          fi

          echo "You can access this cluster with a command like \`uffizzi cluster update-kubeconfig --name=${UFFIZZI_CLUSTER} --kubeconfig=/tmp/kubeconfig\`" >> $GITHUB_STEP_SUMMARY
          echo "and then \`kubectl --kubeconfig /tmp/kubeconfig\` or similar." >> $GITHUB_STEP_SUMMARY

          echo "Ingress for the \`web\` Service at [http://${UFFIZZI_CLUSTER}.wordsmith.app.qa-gke.uffizzi.com](http://${UFFIZZI_CLUSTER}.wordsmith.app.qa-gke.uffizzi.com)." >> $GITHUB_STEP_SUMMARY

      - name: Deploy Kustomize onto Uffizzi Cluster
        run: |
          # Deploy k8s manifests via `kustomize`.
          kubectl apply \
            --kubeconfig=./kubeconfig \
            --kustomize=${{ inputs.environments-root-dir }}/${{ inputs.environment-dir }}

#DEBUG: Dump deployed objects to workflow output.
#          echo '```' >> $GITHUB_STEP_SUMMARY
#          kubectl apply \
#            --kubeconfig=./kubeconfig \
#            --dry-run=client --output=yaml \
#            --kustomize=${{ inputs.environments-root-dir }}/${{ inputs.environment-dir }} >> $GITHUB_STEP_SUMMARY
#          echo '```' >> $GITHUB_STEP_SUMMARY

#DEBUG: dump kubeconfig file (remove this secret leak!)
#          echo '```' >> $GITHUB_STEP_SUMMARY
#          cat ./kubeconfig >> $GITHUB_STEP_SUMMARY
#          echo '```' >> $GITHUB_STEP_SUMMARY

#      - name: Find Comment
#        uses: peter-evans/find-comment@v2
#        id: fc
#        with:
#          repository: UffizziCloud/MostlyDevOps-wordsmith-api
#          issue-number: ${{ inputs.pr-number }}
#          comment-author: 'github-actions[bot]'
#          body-includes: access this cluster
#
#      - name: Create or update comment
#        uses: peter-evans/create-or-update-comment@v3
#        with:
#          repository: UffizziCloud/MostlyDevOps-wordsmith-api
#          comment-id: ${{ steps.fc.outputs.comment-id }}
#          issue-number: ${{ inputs.pr-number }}
#          body: |
#            Uffizzi Cluster \`pr-${{ inputs.pr-number }}\` created.
#            You can access this cluster with a command like \`uffizzi cluster update-kubeconfig --name=pr-${{ inputs.pr-number }} --kubeconfig=/tmp/kubeconfig\`
#            and then \`kubectl --kubeconfig /tmp/kubeconfig\` or similar.
#            Ingress for the \`web\` Service at [http://pr-${{ inputs.pr-number }}.wordsmith.app.qa-gke.uffizzi.com](http://pr-${{ inputs.pr-number }}.wordsmith.app.qa-gke.uffizzi.com).
#
#          edit-mode: replace

      - name: Post to a Slack channel
        id: slack
        if: ${{ inputs.slack-channel-id }}
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: ${{ inputs.slack-channel-id }}
          slack-message: "PR deployed `pr-${{ inputs.pr-number }}`"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack-token }}
